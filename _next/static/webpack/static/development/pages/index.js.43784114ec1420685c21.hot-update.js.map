{"version":3,"file":"static/webpack/static/development/pages/index.js.43784114ec1420685c21.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport Axios from \"axios\";\n\nconst Jobs = props => {\n  console.log(\"propssss\", Object.values(props.jobs));\n  const [jobs, setJobs] = useState(Object.values(props.jobs));\n\n  // useEffect(() => {\n  //   getJobs().then(res => {\n  //     console.log(\"jobsjobs\", res);\n  //     setJobs(res);\n  //   });\n  // }, []);\n\n  // const getJobs = () => {\n  //   return Axios.get(\n  //     \"https://api.lever.co/v0/postings/gojek?limit=10&mode=json\"\n  //   )\n  //     .then(function(response) {\n  //       // handle success\n  //       return response.data;\n  //     })\n  //     .catch(function(error) {\n  //       console.log(error);\n  //     })\n  //     .finally(function() {});\n  // };\n\n  return (\n    <React.Fragment>\n      {jobs.length > 0\n        ? jobs.map(job => {\n            return (\n              <div key={job.id}>\n                {job.text}\n                <Link\n                  href=\"blog/[id]\"\n                  as={process.env.BACKEND_URL + `/blog/${job.id}`}\n                >\n                  <a>see more...</a>\n                </Link>\n              </div>\n            );\n          })\n        : \"Loading...\"}\n    </React.Fragment>\n  );\n};\n\nJobs.getInitialProps = async () => {\n  const response = await fetch(\n    \"https://api.lever.co/v0/postings/gojek?limit=10&mode=json\"\n  );\n\n  const jobs = await response.json();\n  return { jobs : jobs };\n};\n\nexport default Jobs;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAKA;AALA;AAMA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;;;;A","sourceRoot":""}